
import io.shiftleft.codepropertygraph.Cpg
import io.shiftleft.semanticcpg.language._
import io.shiftleft.semanticcpg.language.operatorextension.opnodes.Assignment

private def allocCalls(cpg: Cpg): Steps[Assignment] = {
  cpg.assignment.where { assignment =>
    assignment.argument(2) match {
      case call: Call => call.code.contains("wmem_alloc")
      case _ => false
    }
  }
}

private def zeroAssignment(cpg: Cpg): Steps[Assignment] = {
  cpg.assignment.where { assignment =>
    assignment.argument(2) match {
      case literal: Literal => 
	literal.typeFullName == "int" && literal.code == "0"
      case _ => false
    }
   }
   // .where { assignment => 
   // assignment.argument(1) match {
   //   case call: Call => true
   //   case _ => false
   // }
   //}
}

private def arrayCalls(cpg: Cpg): Steps[Call] = cpg.call("<operator>.indirectIndexAccess")

@main def main(): List[String] = {
  //arrayCalls(cpg).foreach(x=>println(x.code, x.reachableByFlows(allocCalls(cpg))))
  //arrayCalls(cpg).reachableByFlows(allocCalls(cpg)).p
  zeroAssignment(cpg).target.reachableByFlows(allocCalls(cpg)).p
  //allocCalls(cpg).p
}
