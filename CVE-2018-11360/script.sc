//val for_variables = cpg.method.controlStructure.parserTypeName("ForStatement").expressionDown.order(1).ast.isCall.argument

//cpg.identifier.filter(id => cpg.method.controlStructure.parserTypeName("ForStatement").expressionDown.order(1).ast.isIdentifier.name.toSet.contains(id.name))
//
//val array_access = cpg.call("<operator>.indirectIndexAccess").argument
//
//cpg.call("<operator>.indirectIndexAccess").parameter.argument.foreach( x=>println(x.code  ,   x.reachableBy(for_variables).code.p))

// Quite complicated query that looks for array access performed outside from the loops

//cpg.call("<operator>.indirectIndexAccess").argument.foreach(x => println(x.code, " ", x.reachableBy(cpg.identifier.filter(id => cpg.method.controlStructure.parserTypeName("ForStatement").expressionDown.order(2).ast.isIdentifier.name.toSet.contains(id.name))).id.p))
//
//def loop_vars = cpg.identifier.filter(id => cpg.method.controlStructure.parserTypeName("ForStatement").expressionDown.order(1).ast.isIdentifier.name.toSet.contains(id.name))
//
//cpg.call("<operator>.indirectIndexAccess").argument.foreach(x => println(x.code, " ", x.reachableBy(loop_vars).id.p))
@main def execute(payload: String) = {
	importCpg(payload);
	def vars = cpg.identifier.filter(id => cpg.method.controlStructure.parserTypeName("ForStatement").expressionDown.order(2).ast.isIdentifier.name.toSet.contains(id.name))
	
	cpg.call("<operator>.indirectIndexAccess").argument.foreach(x => println(x.code, " ", x.reachableBy(vars).code.p))
	
}
