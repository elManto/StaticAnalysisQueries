import cpp
import semmle.code.cpp.dataflow.TaintTracking

class MyAlloc extends Expr {
    MyAlloc () {
        exists (FunctionCall fc |
            fc.getTarget().getName() = "wmem_alloc" and 
            fc = this )
    }
}
 

class MyDataFlowConfiguration extends DataFlow::Configuration {
    MyDataFlowConfiguration() { this = "MyDataFlowConfiguration" }
  
    override predicate isSource(DataFlow::Node source) {
        source.asExpr() instanceof  MyAlloc
    }
  
    override predicate isSink(DataFlow::Node sink) {
      exists (ArrayExpr ae | 
        sink.asExpr() = ae.getArrayBase() and
        not ae.getBasicBlock().inLoop()
        )
    }
  }


  from MyDataFlowConfiguration cfg, DataFlow::PathNode source, DataFlow::PathNode sink
  where cfg.hasFlowPath(source, sink)
  select sink, source, sink

