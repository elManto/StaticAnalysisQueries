// This script checks if the values returned by calloc (it's easy to change into malloc) are
// directly used into memcpy , leading to a null pointer dereference

import io.shiftleft.codepropertygraph.Cpg
import io.shiftleft.semanticcpg.language._
import io.shiftleft.semanticcpg.language.operatorextension.opnodes.Assignment

private def callocCalls(cpg: Cpg): Steps[Assignment] = {
  cpg.assignment.where { assignment =>
    assignment.argument(2) match {
      case call: Call => call.name == "calloc"
      case _ => false
    }
  }
}

private def memcpyCalls(cpg: Cpg): Steps[Call] = cpg.call("memcpy")

@main def main(): Set[Assignment] = {
  
  memcpyCalls(cpg).reachableBy(callocCalls(cpg)).toSet
  //callocCalls(cpg).toSet.diff(memcpyCalls)
}
